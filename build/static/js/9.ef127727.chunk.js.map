{"version":3,"sources":["modules/updatePassword/modal.js","modules/updatePassword/updatePasswordComponent.js","modules/updatePassword/index.js"],"names":["Modal","useState","modalShow","setModalShow","class","className","to","onClick","UpdatePasswordComponent","props","handleChange","updatePassword","state","buttonColor","temperaryPassword","newPassword","confirmPassword","temPassShow","setTemPassShow","temPassVisible","newPassShow","setNewPassShow","newPassVisible","conPassShow","setConPassShow","conPassVisible","src","alt","success","handleClose","type","placeholder","onChange","eve","target","value","style","width","disabled","color","error","UpdatePassword","name","setState","a","dispatchAction","eventConstants","SHOW_LOADER","data","userId","Utils","parseResponse","changePassword","response","HIDE_LOADER","pathName","window","location","pathname","split","length","history","push","this","BaseComponent","connect","user"],"mappings":"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","file":"static/js/9.ef127727.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction Modal() {\n  const [modalShow, setModalShow] = useState(true);\n  return (\n    <>\n      {modalShow ? (\n        <div class=\"fixed inset-0  bg-darkGrey-100 bg-opacity-70 flex justify-center pt-48\">\n          <div className=\" absolute z-10 flex flex-col justify-center w-125 bg-white rounded-lg -mx-5 pt-1\">\n            <h1 className=\"font-OpenSansSemiBold text-ft7 text-black-50 pt-12.5\">\n              Success!\n            </h1>\n            <p className=\"pt-5 font-OpenSansRegular text-ft4 text-darkGrey-100 px-16.75\">\n              Your account has been created\n            </p>\n            <NavLink to=\"/\" className=\"mx-12.5\">\n              {\" \"}\n              <button\n                className=\" bg-blue-50 mt-7.5 py-6 text-ft4 text-white rounded-full font-OpenSansSemiBold mr-12.5 mb-12.5 w-full\"\n                onClick={() => setModalShow(false)}\n              >\n                {\" \"}\n                Proceed\n              </button>\n            </NavLink>\n          </div>\n        </div>\n      ) : null}\n    </>\n  );\n}\n\nexport default Modal;\n","import React, { useState } from \"react\";\nimport Modal from \"./modal\";\n\nfunction UpdatePasswordComponent(props) {\n  const { handleChange, updatePassword, state } = props;\n  const buttonColor =\n    state.temperaryPassword && state.newPassword && state.confirmPassword\n      ? \"bg-blue-50\"\n      : \"bg-darkGrey-50\";\n\n  const [temPassShow, setTemPassShow] = useState(\"password\");\n  const temPassVisible = () => {\n    if (temPassShow === \"password\") {\n      setTemPassShow(\"text\");\n    }\n    if (temPassShow === \"text\") {\n      setTemPassShow(\"password\");\n    }\n  };\n  const [newPassShow, setNewPassShow] = useState(\"password\");\n  const newPassVisible = () => {\n    if (newPassShow === \"password\") {\n      setNewPassShow(\"text\");\n    }\n    if (newPassShow === \"text\") {\n      setNewPassShow(\"password\");\n    }\n  };\n  const [conPassShow, setConPassShow] = useState(\"password\");\n  const conPassVisible = () => {\n    if (conPassShow === \"password\") {\n      setConPassShow(\"text\");\n    }\n    if (conPassShow === \"text\") {\n      setConPassShow(\"password\");\n    }\n  };\n\n  return (\n    <div className=\" bg-Slate-200 py-20 h-screen \">\n      <div className=\"w-125 pb-6 bg-white text-center  m-auto rounded-lg px-5\">\n        <img src=\"/images/img-logo.png\" alt=\"\" className=\"mx-auto pt-12.5 \" />\n        {state.success ? (\n          <Modal handleClose={() => handleChange(\"success\", false)} />\n        ) : null}\n        <h1 className=\"text-ft7 font-OpenSansSemiBold pt-7.5\">\n          Update your password\n        </h1>\n        <p className=\"mt-1.5 \">Your Temporary password has been sent to your mail</p>\n\n        <div className=\"bg-Slate-50 w-full mt-10 rounded-lg flex justify-between\">\n          <input\n            type={temPassShow}\n            placeholder=\"Temporary password\"\n            className=\"placeholder-black-50 py-5 text-ft4 bg-Slate-50 w-full  rounded-lg  pl-5 font-OpenSansRegular focus:outline-none\"\n            onChange={(eve) =>\n              handleChange(\"temperaryPassword\", eve.target.value)\n            }\n          />\n          {temPassShow == \"password\"? (\n            <img\n              alt=\"\"\n              src=\"/images/Visible_Icon.svg\"\n              className={\"pr-5\"}\n              onClick={temPassVisible}\n              style={{width:\"50px\"}}\n\n            />\n          ) : (\n            <img\n              alt=\"\"\n              src=\"/images/ic-preview.svg\"\n              className={\"pr-5\"}\n              onClick={temPassVisible}\n            />          )}\n        </div>\n        <div className=\"bg-Slate-50 w-full mt-4 rounded-lg flex justify-between\">\n          <input\n            type={newPassShow}\n            placeholder=\"New password\"\n            className=\"placeholder-black-50 py-5 text-ft4 bg-Slate-50 w-full rounded-lg  pl-5  font-OpenSansRegular focus:outline-none\"\n            onChange={(eve) => handleChange(\"newPassword\", eve.target.value)}\n          />\n          {newPassShow == \"password\"? (\n            <img\n              alt=\"\"\n              src=\"/images/Visible_Icon.svg\"\n              className={\"pr-5\"}\n              onClick={newPassVisible}\n              style={{width:\"50px\"}}\n\n            />\n          ) : (\n            <img\n              alt=\"\"\n              src=\"/images/ic-preview.svg\"\n              className={\"pr-5\"}\n              onClick={newPassVisible}\n            />          )}\n        </div>\n        <div className=\"bg-Slate-50 w-full mt-4 rounded-lg flex justify-between\">\n          <input\n            type={conPassShow}\n            placeholder=\"Confirm password\"\n            className=\"bg-Slate-50 w-full  rounded-lg py-5 text-ft4  pl-5  placeholder-darkGrey-100 font-OpenSansRegular focus:outline-none\"\n            onChange={(eve) =>\n              handleChange(\"confirmPassword\", eve.target.value)\n            }\n          />\n          {conPassShow == \"password\"?(\n            <img\n              alt=\"\"\n              src=\"/images/Visible_Icon.svg\"\n              className={\"pr-5\"}\n              onClick={conPassVisible}\n              style={{width:\"50px\"}}\n            />\n          ) : (\n            <img\n              alt=\"\"\n              src=\"/images/ic-preview.svg\"\n              className={\"pr-5\"}\n              onClick={conPassVisible}\n            />\n          )}\n        </div>\n\n        <button\n          type=\"button\"\n          className={\n            \"mt-12.5 mb-6 flex h-17.5 items-center justify-center text-ft4  text-white w-full rounded-full font-OpenSansSemiBold \" +\n            buttonColor\n          }\n          onClick={() => {\n            updatePassword();\n          }}\n          disabled={\n            !state.temperaryPassword ||\n            !state.newPassword ||\n            !state.confirmPassword\n          }\n        >\n          Update password\n        </button>\n        <div style={{color:\"red\"}}>{state.error}</div> \n      </div>\n    </div>\n  );\n}\n\nexport default UpdatePasswordComponent;\n","import React from \"react\";\nimport { eventConstants } from \"../../constants\";\nimport Utils, { dispatchAction } from \"../../utility\";\nimport BaseComponent from \"../baseComponent\";\nimport UpdatePasswordComponent from \"./updatePasswordComponent\";\nimport { changePassword } from \"../../services/user\";\nimport { connect } from \"react-redux\";\nimport { history } from \"../../managers/history\";\n\nclass UpdatePassword extends BaseComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperaryPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n      userId: \"\",\n      success: false,\n      error: \"\",\n    };\n  }\n\n  componentDidMount() {\n    const pathName = window.location.pathname;\n    if (pathName.split(\"/\").length < 3) {\n      history.push(\"/\");\n      return;\n    }\n    this.setState({ userId: pathName.split(\"/\")[2] });\n  }\n\n  handleChange = (name, value) => {\n    if (this.state.error) {\n      this.setState({ error: \"\" });\n    }\n    this.setState({ [name]: value });\n  };\n\n  updatePassword = async () => {\n    if (\n      !this.state.confirmPassword ||\n      !this.state.newPassword ||\n      !this.state.temperaryPassword\n    ) {\n      this.setState({ error: \"Please provide required field\" });\n      return;\n    }\n    if (this.state.confirmPassword !== this.state.newPassword) {\n      this.setState({ error: \"Confirm and new password did not match\" });\n      return;\n    }\n    this.props.dispatchAction(eventConstants.SHOW_LOADER, true);\n    const data = {\n      temperaryPassword: this.state.temperaryPassword,\n      newPassword: this.state.newPassword,\n      userId: this.state.userId,\n    };\n\n    const [error, response] = await Utils.parseResponse(changePassword(data));\n    this.props.dispatchAction(eventConstants.HIDE_LOADER, true);\n    if (!response || error) {\n      this.setState({ error: \"Failed to update password\" });\n      return;\n    }\n    this.setState({ success: true });\n  };\n\n  render() {\n    return (\n      <UpdatePasswordComponent\n        handleChange={this.handleChange}\n        updatePassword={this.updatePassword}\n        state={this.state}\n      />\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n  };\n};\n\nexport default connect(mapStateToProps, { dispatchAction })(UpdatePassword);\n"],"sourceRoot":""}